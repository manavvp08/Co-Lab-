// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum FriendshipStatus {
    PENDING
    ACCEPTED
    DECLINED
}

enum CollaborationStatus {
    PENDING
    ACCEPTED
    DECLINED
}

model Form {
    id              String   @id @default(cuid())
    title           String
    project_name    String
    description     String
    completion_date DateTime
    completion_time String?
    type            String
    frameworks      String[]
    updates         String
    rating          Int
    ongoing         Boolean
    image           String
    brief           String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    @@index([id])
}

model Post {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    @@index([name])
}

model Project {
    id              String                @id @default(cuid())
    project_name    String
    description     String
    completion_date DateTime
    tech_stack      String[]
    is_ongoing      Boolean
    is_public       Boolean
    is_open_collab  Boolean
    github_link     String?
    hosted_link     String?
    image           String?
    brief           String?
    note            String?
    collaborators   ProjectCollaborator[]

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    ProjectBookmark ProjectBookmark[]
    ProjectComment  ProjectComment[]

    @@index([id])
}

model ProjectCollaborator {
    id             String              @id @default(cuid())
    project        Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId      String
    collaborator   User                @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
    collaboratorId String
    status         CollaborationStatus

    @@unique([projectId, collaboratorId])
}

model ProjectBookmark {
    id        String  @id @default(cuid())
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@unique([projectId, userId])
}

model ProjectComment {
    id        String   @id @default(cuid())
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comment   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id])
}

model Friendship {
    id        String           @id @default(cuid())
    user      User             @relation(fields: [userId], references: [id], name: "user", onDelete: Cascade)
    userId    String
    friend    User             @relation(fields: [friendId], references: [id], name: "friend", onDelete: Cascade)
    friendId  String
    status    FriendshipStatus
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    @@unique([userId, friendId])
}



model Chat {
    id         String   @id @default(cuid())
    chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
    chatRoomId String
    message    String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Notification {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String()
    access_token      String? @db.String()
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String()
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String                @id @default(cuid())
    name                String?
    email               String?               @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    posts               Post[]
    Form                Form[]
    Project             Project[]
    ProjectCollaborator ProjectCollaborator[]
    Friendship          Friendship[]          @relation("user")
    Friend              Friendship[]          @relation("friend")
    Notification        Notification[]
    ProjectBookmark     ProjectBookmark[]
    ProjectComment      ProjectComment[]
    ChatRoom            ChatRoom[]            @relation("user", fields: [id], references: [userId]) // Add opposite relation field here
    ChatRoomFriend      ChatRoom[]            @relation("friend", fields: [id], references: [friendId]) // Add opposite relation field here
    Chat                Chat[]
    
    @@index([id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

